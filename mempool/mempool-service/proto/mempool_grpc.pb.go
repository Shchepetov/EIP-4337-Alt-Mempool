// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mempool.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemPoolClient is the client API for MemPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemPoolClient interface {
	Add(ctx context.Context, in *UserOperation, opts ...grpc.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
}

type memPoolClient struct {
	cc grpc.ClientConnInterface
}

func NewMemPoolClient(cc grpc.ClientConnInterface) MemPoolClient {
	return &memPoolClient{cc}
}

func (c *memPoolClient) Add(ctx context.Context, in *UserOperation, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.mempool.MemPool/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memPoolClient) GetAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.mempool.MemPool/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemPoolServer is the server API for MemPool service.
// All implementations should embed UnimplementedMemPoolServer
// for forward compatibility
type MemPoolServer interface {
	Add(context.Context, *UserOperation) (*Response, error)
	GetAll(context.Context, *GetRequest) (*Response, error)
}

// UnimplementedMemPoolServer should be embedded to have forward compatible implementations.
type UnimplementedMemPoolServer struct {
}

func (UnimplementedMemPoolServer) Add(context.Context, *UserOperation) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMemPoolServer) GetAll(context.Context, *GetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

// UnsafeMemPoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemPoolServer will
// result in compilation errors.
type UnsafeMemPoolServer interface {
	mustEmbedUnimplementedMemPoolServer()
}

func RegisterMemPoolServer(s grpc.ServiceRegistrar, srv MemPoolServer) {
	s.RegisterService(&MemPool_ServiceDesc, srv)
}

func _MemPool_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemPoolServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.mempool.MemPool/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemPoolServer).Add(ctx, req.(*UserOperation))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemPool_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemPoolServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.mempool.MemPool/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemPoolServer).GetAll(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemPool_ServiceDesc is the grpc.ServiceDesc for MemPool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemPool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.mempool.MemPool",
	HandlerType: (*MemPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _MemPool_Add_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MemPool_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mempool.proto",
}
